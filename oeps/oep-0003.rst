===================================
OEP-3: Asynchronous Task Management
===================================

+---------------+-------------------------------------------+
| OEP           | :doc:`oep-0003`                              |
+---------------+-------------------------------------------+
| Title         | Asynchronous Task Management              |
+---------------+-------------------------------------------+
| Last-Modified | 2016-06-13                                |
+---------------+-------------------------------------------+
| Author        | Jeremy Bowman <jbowman@edx.org>           |
+---------------+-------------------------------------------+
| Arbiter       |                                           |
+---------------+-------------------------------------------+
| Status        | Draft                                     |
+---------------+-------------------------------------------+
| Type          | Architecture                              |
+---------------+-------------------------------------------+
| Created       | 2016-06-09                                |
+---------------+-------------------------------------------+

Abstract
========

Proposes a system which allows users to initiate, monitor, and retrieve the
results of various long-running tasks in a consistent manner.  This system
leverages existing libraries where practical and makes the development of new
asynchronous tasks straightforward.


Specification
=============

A new open source Django application will be written to support a user
interface for managing celery tasks in a consistent manner across services.
The main goals of the application are, roughly in order:

1. Allow a long-running task triggered by a user to be run asynchronously,
   while it is clear to the user that they are free to do other work on the
   site in the meantime
2. Allow the user to fetch any output of the task after it finishes
3. Notify the user when the task is complete
4. Give the user some indication of how far along an in-progress task is
5. Support prevention of multiple identical tasks from executing concurrently

Celery will be used to run the asynchronous tasks, but the design should be
capable of adapting to a different task runner later if necessary.  Database
models will be used to represent tasks as well as their input, output, and
current status.  It will be possible to present a fan-out of Celery tasks
instantiated to perform work in parallel as a single task from the user's
perspective with a meaningful progress indicator.

For notifications, email is sufficient for the initial implementation (but
other push notifications may be added later).  A task status page for each
task will show any available information about how far along the task is, and
allow retrieval of any output it may have generated.  The user will be
redirected to this status page when the task is requested.  The initial
implementation might not include real-time updates of the data on the page or
a dashboard listing all tasks initiated by the user, but these will be added
in time.  Similarly, support for tasks which can be monitored by multiple
users with sufficient access priveleges is desired but may be added after the
initial release.

Course import and export will utilize the new system when it is released, and
other long-running tasks will switch to use it as needed.

Motivation
==========

Course import and export are currently implemented such that they occur in the
scope of a web request, but often take long enough to time out.  This is not
only annoying for the user, but can lose the result of an export or leave the
user uncertain of whether it's safe to start editing the newly imported course
yet.  Clearly the work should be done asynchronously, but we do not yet have a
standard solution for asynchronous tasks which allow the user to track their
progress and/or retrieve output upon completion.  Upon further discussion, it
became clear that other such asynchronous tasks, existing and planned, would
benefit from a consistent framework.  Examples include:

* Re-running a course
* Sending bulk email to course participants
* Generating certificates
* Grading (rescoring, reset attempts, delete state, calculated grades CSV)
* Data downloads (grades, student profiles)
* Open Response Assessment
* Discussion/forum notifier
* Uploading and encoding videos (Video Abstraction Layer, VEDA)


Rationale
=========

Celery is already in use for other asynchronous tasks, and made a logical
choice as the underlying task execution engine.  Course import and export
timeouts are already happening relatively often, so there is a desire to keep
the scope of the initial implementation small enough that it can be finished
fairly quickly.

Similar functionality has already been implemented for
`course re-runs <https://github.com/edx/edx-platform/tree/master/common/djangoapps/course_action_state>`_
and assorted LMS actions such as
`bulk email and grade downloads <https://github.com/edx/edx-platform/tree/master/lms/djangoapps/instructor_task>`_,
but as one-off implementations that share no code.  The new
implementation should combine the best features of these in a form that can be
easily reused for all the user-triggered asynchronous tasks in any service.

The `Jobtastic <https://policystat.github.io/jobtastic/>`_ add-on for Celery
includes some potentially useful functionality for status tracking and error
handling, but it's not yet clear if it would be suitable to include as-is for
this system or just serve as a source of ideas.  There doesn't seem to be a
good existing library providing any user interface elements for managing
celery tasks which isn't geared towards system administrators, although some
of the code in the task dashboard from
`Flower <https://github.com/mher/flower>`_ may prove useful.


Backwards Compatibility
=======================

* Some documentation that deals with course import and export will need to be
  updated to describe the new workflow.  The task status page should contain
  enough information to be pretty self-explanatory, though.
* There will be migrations to add new tables for task tracking.
* There are a lot of asynchronous tasks already in the
  `instructor task <https://github.com/edx/edx-platform/tree/master/lms/djangoapps/instructor_task>`_
  package of the LMS, so particular care should be taken to produce something
  compatible with that in both code and behavior.  The existing code is local
  to the LMS and makes some assumptions about what kind of tasks can be run,
  so it can't just be used as is.


Copyright
=========

.. image:: https://i.creativecommons.org/l/by-sa/4.0/88x31.png
    :alt: Creative Commons License CC-BY-SA
    :target: http://creativecommons.org/licenses/by-sa/4.0/

This work is licensed under a `Creative Commons Attribution-ShareAlike 4.0 International License`_.

.. _Creative Commons Attribution-ShareAlike 4.0 International License: https://creativecommons.org/licenses/by-sa/4.0/


